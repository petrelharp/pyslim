initialize()
{
    setSeed(25);
    if (!exists("TREES_FILE")) defineGlobal("TREES_FILE", "out.trees"); 
    // as well as any bespoke TREES_FILE for output, you need to define:
    //  TREES_IN = path to trees to initialise
	defineConstant("L", 1e2);
	initializeSLiMOptions(keepPedigrees=T, nucleotideBased=T);
    initializeSex();
    initializeTreeSeq(timeUnit="generations");
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 0.5, "n", 0.0, 0.1);
	initializeGenomicElementType("g1", m1, 1.0, mmJukesCantor(4e-2));
	if (!exists("SUBPOP_MAP")) defineConstant("SUBPOP_MAP", NULL);

	types = c("A", "X", "Y", "H", "Z", "W", "HF", "FL", "HM", "ML", "-Y");
	symbols = c("A", "X", "Y", "H", "Z", "W", "HF", "FL", "HM", "ML", "nY");
	ids = 1 + seqAlong(types);
   length = 1e4;
	
	for (id in ids, symbol in symbols, type in types)
	{
		initializeChromosome(id, length, type, symbol);
      initializeAncestralNucleotides(paste0(rep("A", length))); // UNUSED
		initializeRecombinationRate(1e-5);
		initializeGenomicElement(g1, 0, length-1);
	}
}

1 late() { 
    // output immediately! Nothing should have changed.
    md = treeSeqMetadata(TREES_IN, userData=F).getValue("SLiM").getValue("user_metadata");
    sim.readFromPopulationFile(TREES_IN, subpopMap=SUBPOP_MAP);
    sim.treeSeqOutput(TREES_FILE, simplify=F, metadata=md);
}

2 early() {
    catn("Done.");
    sim.simulationFinished();
}
